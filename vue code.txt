observer.js  观察者.js ( 观察 data 下所有属性 )
例如：
data : { a : 'a' , b : 'b' , c : 'c' }

递归 data ， 每个属性 Object.defineProperty ， 这个每个属性new 了一个Dep
生成 3 个 dep ，
{ id : 0 , subs : [] }   // a属性的dep
{ id : 1 , subs : [] }   // b属性的dep
{ id : 2 , subs : [] }   // c属性的dep


// compile
compile 解析html ，指令(v-xxx="a"), {{ a }}
如果html 解析出来 两个地方调用 data中的a, 则会new 两个 watcher


通过 compile 里面生成 new Watcher() 找关联
new Watcher() 的时候做了一下操作
Watcher(vm, expOrFn, cb)  // 实例 ， expOrFn 是对应data里的属性
watcher get获取 data[expOrFn] 时候，先设置了一个当前的watcher 
Dep.target = this   this 是单前watch
接着去跑 observer.js 中  Object.defineProperty 的get 方法
if (Dep.target) {  // Dep.target 等于 new 出来的watch
    dep.depend();
} 
跑 depend 方法，
Dep中的方法
depend: function() {
    Dep.target.addDep(this);  // new 出来的watcher 调用自己的 addDep
},
Watcher.prototype.addDep（dep）
this.depIds 为空对象，这里做映射，没有的push 进去
if (!this.depIds.hasOwnProperty(dep.id)) { 
    dep.addSub(this); // 填充到 dep中去
    this.depIds[dep.id] = dep;
}

到此，初始设置完成
大致会生成 
{ id : 0 , subs : [ watcher1 , watcher1 ] }
{ id : 1 , subs : [ watcher1 , watcher1 ] }
{ id : 2 , subs : [ watcher1 , watcher1 ] }

修改值

 Object.defineProperty(data, key, {
    ...
    set: function(newVal) {
        if (newVal === val) {
            return;
        }
        val = newVal;
        // 新的值是object的话，进行监听
        childObj = observe(newVal); // 重新跑一次，忽略
        // 通知订阅者
        dep.notify();
    }
});

dep.notify() 主要看一下 dep.notify()

dep 中一系列 watcher 更新 ，subs 是所有watcher该属性的数组集合
this.subs.forEach(function(sub) {
    sub.update();
});
调用watcher 的update
run: function() {
    var value = this.get();
    var oldVal = this.value;
    if (value !== oldVal) {
        this.value = value;
        this.cb.call(this.vm, value, oldVal);
    }
}
更新时，通过 每个watcher 中的 cb （回调函数），调用到compile中的实例watcher 的回调函数，
这个回调函数是更新dom

updaterFn(node, value, oldValue);


基本原理走完
